<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Personal blog of Quentin Rousseau]]></title>
  <link href="http://blog.quent.in/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.quent.in/"/>
  <updated>2017-04-23T02:58:10-07:00</updated>
  <id>http://blog.quent.in/</id>
  <author>
    <name><![CDATA[Quentin Rousseau]]></name>
    <email><![CDATA[contact@quent.in]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create a ruby pseudo terminal (PTY) and invoke an interactive command (SFTP)]]></title>
    <link href="http://blog.quent.in/blog/2015/03/29/create-a-ruby-pseudo-terminal-pty-and-invoke-an-interactive-command-SFTP/"/>
    <updated>2015-03-29T22:37:51-07:00</updated>
    <id>http://blog.quent.in/blog/2015/03/29/create-a-ruby-pseudo-terminal-pty-and-invoke-an-interactive-command-SFTP</id>
    <content type="html"><![CDATA[<h2>Purpose</h2>

<p>I needed to upload files on a <strong>SFTP server</strong> <strong>programmatically</strong> and <strong>automatically</strong> in
a RoR Enviroment. SFTP ruby library wrapper are very limited (I only found
<a href="https://github.com/net-ssh/net-sftp">this one</a> actually) and is in <strong>maintenance (not more maintained)</strong>
and I had some troubles uploading large files.</p>

<p>Anyway I decided to come back to use the old <a href="http://linux.die.net/man/1/sftp">SFTP Command Line Interface</a>
who is perfectly working.</p>

<p>Unlucky this one is an <strong>Interactive</strong> CLI.</p>

<p>The trick is to use a <a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/pty/rdoc/PTY.html">Ruby Pseudo Terminal (PTY)</a>, listen to the console
input for some patterns and write in the console output according this pattern
as a real user would do.</p>

<p>Here is a code snippet who doing the job and working perfectly.</p>

<h2>Code</h2>

<p>```ruby
require &lsquo;pty&rsquo;
require &lsquo;expect&rsquo;</p>

<p>PTY.spawn(&lsquo;sftp username@sftp.domain.com:/uploads&rsquo;) do |input, output|</p>

<p>  # Say yes to SSH fingerprint
  input.expect(/fingerprint/, 2) do |r|</p>

<pre><code>output.puts "yes" if !r.nil?

# Enter SFTP password
input.expect(/password/, 2) do |r|

  output.puts 'your_sftp_password' if !r.nil?

  input.expect(/sftp/) do

    # List folders and files in `/uploads`
    output.puts 'ls'

    # Check if folder named `foo` exist
    input.expect(/foo/, 1) do |result|

      is_folder_exist = result.nil? ? false : true
      # Create `foo` folder if does'nt exist
      output.puts "mkdir foo" if !is_folder_exist
      # Change directory to `foo`
      output.puts "cd foo"
      # Upload `/path/to/local/foo.txt` in `foo` folder as `foo.txt`
      output.puts "put /path/to/local/foo.txt foo.txt"
      # Exit SFTP
      output.puts "exit"

    end

  end

end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h2>Gist</h2>

<p>Available <a href="https://gist.github.com/kwent/e2c34c2dfd01a194a49a">here</a>. Please feel free to improve it !</p>

<h2>More&hellip;</h2>

<ul>
<li><a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/pty/rdoc/PTY.html">PTY</a></li>
<li><a href="https://github.com/net-ssh/net-sftp">Net::SFTP</a></li>
<li><a href="http://linux.die.net/man/1/sftp">man SFTP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding scopes to ActiveRecord::Base]]></title>
    <link href="http://blog.quent.in/blog/2014/04/23/adding-scopes-to-activerecord-base/"/>
    <updated>2014-04-23T20:00:08-07:00</updated>
    <id>http://blog.quent.in/blog/2014/04/23/adding-scopes-to-activerecord-base</id>
    <content type="html"><![CDATA[<h2>Purpose</h2>

<p>If you are using many times <code>created_at</code> and <code>updated_at</code> attributes and you&rsquo;re
playing a lot with them in you queries, you should be interesting by this
<strong>MonkeyPatch</strong> who is
adding useful scopes in every models who inherits from <code>ActiveRecord::Base</code>.</p>

<h2>MonkeyPatch</h2>

<ul>
<li>Create <code>app/initializer/active_record_scopes_extension.rb</code> file and add the
code below.</li>
<li>Call <code>MyModel.created(DateTime.now)</code> or <code>MyModel.updated(3.days.ago)</code> or
<code>MyModel.created(2.day.ago, 1.day.ago)</code>.</li>
</ul>


<p>```ruby
module Scopes
  def self.included(base)</p>

<pre><code>base.class_eval do
  def self.created(date_start, date_end = nil)
      if date_start &amp;&amp; date_end
        scoped(:conditions =&gt; ["#{table_name}.created_at &gt;= ? AND #{table_name}.created_at &lt;= ?", date_start, date_end])
      elsif date_start
        scoped(:conditions =&gt; ["#{table_name}.created_at &gt;= ?", date_start])
      end
  end
  def self.updated(date_start, date_end = nil)
      if date_start &amp;&amp; date_end
        scoped(:conditions =&gt; ["#{table_name}.updated_at &gt;= ? AND #{table_name}.updated_at &lt;= ?", date_start, date_end])
      elsif date_start
        scoped(:conditions =&gt; ["#{table_name}.updated_at &gt;= ?", date_start])
      end
  end
end
</code></pre>

<p>  end
end</p>

<p>ActiveRecord::Base.send(:include, Scopes)
```</p>
]]></content>
  </entry>
  
</feed>
